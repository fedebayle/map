#!/usr/bin/python
# ionice -c3 -p0 nice -n 19 ../doSWBD.py *.zip

import sys
import os
import string
import shutil
import osgeo.gdal
from osgeo.gdalconst import *
from mapnik import *
from subprocess import call
#from multiprocessing import Pool

script_path = sys.argv[0].replace("do.py", "")
hgt_path = "/media/Mapnik/SWBD/shp"
colorshade_from_path = "/media/Mapnik/SRTM/colorshade"
colorshade_path = "/media/Mapnik/SWBD/colorshade"
swdb_path = "/media/Mapnik/SWBD"

prj_str = "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over"
prj = Projection(prj_str)


def rm(file):
  if os.path.exists(file):
    os.remove(file)

def job(file):
  file = file.replace(".zip", "")
  rm("%s.shp" % file)
  rm("%s.shx" % file)
  rm("%s.dbf" % file)
  
  ew = file[0:1].capitalize()
  ns = file[4:5].capitalize()
  ewv = file[1:4]
  nsv = file[5:7]
  file2 = "%s%s%s%s" % (ns, nsv, ew , ewv)
  
  rm("%s/%s_1.tif" % (colorshade_path, file2))
  rm("%s/%s_2.tif" % (colorshade_path, file2))
  rm("%s/%s_3.tif" % (colorshade_path, file2))

  ewv = int(ewv)
  nsv = int(nsv)
  if ew == 'W':
    ewv = -ewv;
  if ns == 'S':
    nsv = -nsv
    
  if os.path.exists("%s/%s-color-shade.tif" % (colorshade_from_path, file2)) and not os.path.exists("%s/%s-color-shade.tif" % (colorshade_path, file2)):
    try:
      print("%s > %s" % (file, file2))
      call("unzip %s.zip" % (file), shell=True)
  #    call("cp %s/%s-color-shade.tif %s/%s-color-shade.tif" % (colorshade_from_path, file2, colorshade_path, file2), shell=True)
  #    call("gdal_translate -ot Byte -of GTiff -co COMPRESS=JPEG -co JPEG_QUALITY=90 -co BLOCKYSIZE=8 -a_ullr %i %i %i %i %s/%s-color-shade.tif %s/%s-color-shade.tif" % (ewv, nsv, ewv+1, nsv+1, colorshade_from_path, file2, colorshade_path, file2), shell=True)
  #    call("gdal_rasterize -b 1 -b 2 -b 3 -burn 181 -burn 208 -burn 208 -a FACC_CODE -l %s %s.shp %s/%s-color-shade.tif" % (file, file, colorshade_path, file2), shell=True)

      call("gdal_merge.py %s/%s-color-shade.tif -o %s/%s_1.tif -ps 50 50" % (colorshade_from_path, file2, colorshade_path, file2), shell=True)

      dataset = osgeo.gdal.Open("%s/%s_1.tif" % (colorshade_path, file2), GA_ReadOnly)
      geotransform = dataset.GetGeoTransform()
      if not geotransform is None:
        pr = prj.inverse(Coord(geotransform[0], geotransform[3]))
        lox = pr.x
        loy = pr.y
        pr = prj.inverse(Coord(geotransform[0] + dataset.RasterXSize*geotransform[1], geotransform[3] + dataset.RasterYSize*geotransform[5]))
        hix = pr.x
        hiy = pr.y
#      else:
#        merc = prj.forward(Coord(ewv, nsv))
#        lox = merc.x
#        hiy = merc.y
#        merc = prj.forward(Coord(ewv + 1, nsv + 1))
#        hix = merc.x
#        loy = merc.y
#      print "%f %f, %f, %f" % (lox, loy, hix, hiy)
      call("gdal_translate -ot Byte -of GTiff -co BLOCKYSIZE=8 -a_ullr %f %f %f %f %s/%s_1.tif %s/%s_2.tif" % (lox, loy, hix, hiy, colorshade_path, file2, colorshade_path, file2), shell=True)
      call("gdal_rasterize -b 1 -b 2 -b 3 -burn 181 -burn 208 -burn 208 -a FACC_CODE -l %s %s.shp %s/%s_2.tif" % (file, file, colorshade_path, file2), shell=True)

      dataset = osgeo.gdal.Open("%s/%s_2.tif" % (colorshade_path, file2), GA_ReadOnly)
      geotransform = dataset.GetGeoTransform()
      if not geotransform is None:
        pr = prj.forward(Coord(geotransform[0] - geotransform[1]*0, geotransform[3] - geotransform[5]*0))
        lox = pr.x
        loy = pr.y
        pr = prj.forward(Coord(geotransform[0] + (dataset.RasterXSize)*geotransform[1], geotransform[3] + (dataset.RasterYSize)*geotransform[5]))
        hix = pr.x
        hiy = pr.y
      print "%d, %d, %d, %d" % (lox, loy, hix, hiy)
      call("gdal_translate -ot Byte -of GTiff -co COMPRESS=LZW -co BLOCKYSIZE=8 -a_ullr %f %f %f %f %s/%s_2.tif %s/%s_3.tif" % (lox, loy, hix, hiy, colorshade_path, file2, colorshade_path, file2), shell=True)

      shutil.move("%s/%s_3.tif" % (colorshade_path, file2), "%s/%s.tif" % (colorshade_path, file2))
    except:
      print "Aille! - ", sys.exc_info()[0]
      

  rm("%s/%s_1.tif" % (colorshade_path, file2))
  rm("%s/%s_2.tif" % (colorshade_path, file2))
  rm("%s/%s_3.tif" % (colorshade_path, file2))
  rm("%s.shp" % file)
  rm("%s.shx" % file)
  rm("%s.dbf" % file)

#pool = Pool(processes=1)
#pool.map(job, sys.argv[1:])

for i in sys.argv[1:]:
  job(i)
