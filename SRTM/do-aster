#!/usr/bin/python2.6
# ionice -c3 nice -n 19 ../../do-aster *.zip

# error on contour/10/N33E075c10

import sys
import os
import string
from multiprocessing import Pool
from subprocess import call
import osgeo.gdal
from osgeo.gdalconst import *


script_path = "/media/Mapnik/scriptes"
aster_path = "/media/Mapnik/Aster/Sources"
aster_path = "/media/Mapnik/Aster/Sources/done"
srtm_path = "/media/Mapnik/SRTM"
hgt_path = "/media/Mapnik/SRTM/hgt"
colorshade_path = "/media/Mapnik/SRTM/colorshade/1"
warped_path = "/media/Mapnik/SRTM/warped/1"
contour_path = "/media/Mapnik/SRTM/contour"
metadata_path = "/media/Mapnik/SRTM/metadata"
contour100_path = "/media/Mapnik/SRTM/contour/100"
contour50_path = "/media/Mapnik/SRTM/contour/50"
contour10_path = "/media/Mapnik/SRTM/contour/10"


def rm(file):
  if os.path.exists(file):
    os.remove(file)

def job(aster_file):
  file = os.path.abspath(aster_file).replace(aster_path+"/ASTGTM_", "").replace(".zip", "")
#  file = aster_file.replace("ASTGTM_", "").replace(".zip", "")
  call("unzip -n %s" % (aster_file), shell=True)
  rm("%s/ASTGTM_%s_num.tif" % (aster_path, file))

  os.rename("%s/ASTGTM_%s_dem.tif" % (aster_path, file), "%s.tif" % file)
  call("cp %s.xml %s/%s.xml" % (aster_file, metadata_path, file), shell=True)

  rm("%s-void-filled.tif" % file)
  rm("%s-adapted.tif" % file)
  rm("%s-warped.tif" % file)
  rm("%s-color-shade-t.tif" % file)

  # rm old
  rm("%s/%s.hgt.zip" % (hgt_path, file))

  # force regenerate
  rm("%s/%s-color-shade.tif" % (colorshade_path, file))
#  rm("%s/%sc50.shp" % (contour50_path, file))

  if not os.path.exists("%s/%sc10.shp" % (contour10_path, file)):
    rm("%s/%sc10.shp" % (contour10_path, file))
    rm("%s/%sc10.dbf" % (contour10_path, file))
    rm("%s/%sc10.shx" % (contour10_path, file))
    rm("%s/%sc50.shp" % (contour50_path, file))
    rm("%s/%sc50.dbf" % (contour50_path, file))
    rm("%s/%sc50.shx" % (contour50_path, file))
    rm("%s/%sc100.shp" % (contour100_path, file))
    rm("%s/%sc100.dbf" % (contour100_path, file))
    rm("%s/%sc100.shx" % (contour100_path, file))
#    call("gdal_contour -i 10 -snodata 32767 -a height %s.tif %s/%sc10.shp" % (file, contour10_path, file), shell=True)
    call("gdal_contour -i 10 -snodata -9999 -a height %s.tif %s/%sc10.shp" % (file, contour10_path, file), shell=True)
    call("gdal_contour -i 50 -snodata -9999 -a height %s.tif %s/%sc50.shp" % (file, contour50_path, file), shell=True)
    call("gdal_contour -i 100 -snodata -9999 -a height %s.tif %s/%sc100.shp" % (file, contour100_path, file), shell=True)
    call("shapeindex %s/%sc10" % (contour10_path, file), shell=True)
    call("shapeindex %s/%sc50" % (contour50_path, file), shell=True)
    call("shapeindex %s/%sc100" % (contour100_path, file), shell=True)

#  if not os.path.exists("%s/%s-color-shade.tif" % (colorshade_path, file)):
  if True:
    rm("%s-void-filled.tif" % file)
    call("/media/Mapnik/demtools/void-filling %s.tif %s-void-filled.tif" % (file, file), shell=True)

    rm("%s-adapted.tif" % file)
    call("gdal_translate -of GTiff -co TILED=YES -a_srs +proj=latlong %s-void-filled.tif %s-adapted.tif" % (file, file), shell=True)
    rm("%s-warped.tif" % file)
    call("gdalwarp -of GTiff -co TILED=YES -srcnodata -9999 -dstnodata 0 -t_srs \"+proj=merc +ellps=sphere +R=6378137 +a=6378137 +units=m\" -rcs -order 3 -tr 30 30 -multi %s-adapted.tif %s-warped.tif" % (file, file), shell=True)
    call("gdal_translate -of GTiff -co COMPRESS=LZW %s-warped.tif %s/%s.tif" % (file, warped_path, file), shell=True)

    rm("%s-color-shade-t.tif" % file)
    call("/media/Mapnik/demtools/color-shade %s/%s.tif %s/scale2.txt %s-color-shade-t.tif -z 2 -s 1.8 -a 0.2" % (warped_path, file, script_path, file), shell=True)
    
    # crop
#    dataset = osgeo.gdal.Open("%s-color-shade-t.tif" % (file), GA_ReadOnly)
#    geotransform = dataset.GetGeoTransform()
#    if not geotransform is None:
#      call("gdal_translate -ot Byte -of GTiff -srcwin 1 1 %i %i -co COMPRESS=JPEG -co JPEG_QUALITY=90 -co BLOCKYSIZE=8 %s-color-shade-t.tif %s/%s-color-shade.tif" % (dataset.RasterXSize - 2, dataset.RasterYSize - 2, file, colorshade_path, file), shell=True)
#    else:
#    call("gdal_translate -ot Byte -of GTiff -co BLOCKYSIZE=8 %s-color-shade-t.tif %s/%s-color-shade.tif" % (file, colorshade_path, file), shell=True)


    print("gdal_translate -ot Byte -of GTiff -co COMPRESS=JPEG -co JPEG_QUALITY=90 -co BLOCKYSIZE=8 %s-color-shade-t.tif %s/%s.tif" % (file, colorshade_path, file))
    call("gdal_translate -ot Byte -of GTiff -co COMPRESS=JPEG -co JPEG_QUALITY=90 -co BLOCKYSIZE=8 %s-color-shade-t.tif %s/%s.tif" % (file, colorshade_path, file), shell=True)



  rm("%s.tif" % file)
  rm("%s-void-filled.tif" % file)
  rm("%s-adapted.tif" % file)
  rm("%s-warped.tif" % file)
  rm("%s-color-shade-t.tif" % file)

#pool = Pool(processes=3)
#pool.map(job, sys.argv[1:])

for i in sys.argv[1:]:
  job(i)
