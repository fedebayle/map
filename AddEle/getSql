#!/usr/bin/python
# -*- coding: utf-8 -*-


booth_speed = """
(case bicycle 
    when 'yes' then 1
    when 'designated' then 1
    when 'official' then 1
    when 'destination' then 50
    when 'agricultural' then 9999 
    when 'forestry' then 9999
    when 'delivery' then 9999
    when 'permissive' then 9999
    when 'private' then 9999
    when 'no' then 9999
    else (case access
        when 'yes' then 1
        when 'designated' then 1
        when 'official' then 1
        when 'destination' then 50
        when 'agricultural' then 9999
        when 'forestry' then 9999
        when 'delivery' then 9999
        when 'permissive' then 9999
        when 'private' then 9999
        when 'no' then 9999
    else 1
    end)
end) *
(case highway
    when 'motorway' then 9999
    when 'trunk' then 9999
    when 'primary' then 1.015
    when 'secondary' then 1.01
    when 'tertiary' then 1.005
    when 'residential' then 1
    when 'unclassified' then 1
    when 'service' then 1.015
    when 'pedestrian' then 1.01
    when 'cycleway' then 0.9
    when 'footway' then 2
    when 'path' then 1.05
    when 'steps' then 7
    when 'track' then (case tracktype
        when 'grade1' then 1.1
        when 'grade2' then 1.2
        when 'grade3' then 1.5
        when 'grade4' then 1.9
        when 'grade5' then 2.5
        else 1.5
    end)
    when 'road' then 1
    else 9999
end) *
(case "mtb:scale" 
    when '0' then 1
    when '1' then 1.5
    when '2' then 2
    when '3' then 3
    when '4' then 4.3
    when '5' then 6
    else (case sac_scale
        when 'hiking' then 1.2
        when 'mountain_hiking' then 3
        when 'demanding_mountain_hiking' then 6
        when 'alpine_hiking'  then 12
        when 'demanding_alpine_hiking'  then 24
        when 'difficult_alpine_hiking'  then 48
        else 1.2
    end)
end) *
(case trail_visibility 
    when 'excellent' then 1.0
    when 'good' then 1.1
    when 'intermediate' then 1.3
    when 'bad' then 1.8
    when 'horrible' then 2.5
    when 'no' then 4.0
    else 1.1
end)
"""

booth_fixed = """ +
(case source_highway
    when 'mini_roundabout' then 1
    when 'stop' then 1
    when 'give_way' then 1
    when 'traffic_signals' then 7
    when 'crossing' then 1
    else 0
end) +
(case target_highway
    when 'mini_roundabout' then 1
    when 'stop' then 1
    when 'give_way' then 1
    when 'traffic_signals' then 7
    when 'crossing' then 1
    else 0
end)
"""

speed = """(case cycleway
    when 'lane' then 1.05
    when 'track' then 1.1
    else 1
end) * 
(case oneway when '-1' then 9999 else 1
end)
"""

reversespeed = """
(case cycleway
    when 'lane' then 1.05 * (case oneway 
        when 'yes' then 9999
        when '1' then 9999
        when 'true' then 9999 
        else 1
    end)
    when 'track' then 1.1 * (case oneway 
        when 'yes' then 9999
        when '1' then 9999
        when 'true' then 9999 
        else 1
    end)
    when 'opposite_lane' then 1.05
    when 'opposite_track' then 1.1
    when 'opposite' then 1.1
    else (case oneway 
        when 'yes' then 9999
        when '1' then 9999
        when 'true' then 9999 
        else 1
    end)
end)
"""

#print "SELECT (%1s) FROM ways limit 40;"%booth_speed // 1.3 1.4 13000
#print "SELECT (%1s) FROM ways limit 40;"%booth_fixed // 0
#print "SELECT (%1s) FROM ways limit 40;"%speed // 1
#print "SELECT (%1s) FROM ways limit 40;"%reversespeed // 1

length = "ST_Length(the_geom, true)"
#print "SELECT (%1s) FROM ways limit 40;"%length / 8..600
commondiff = "(case when %(signe)s altitude_diff > 0 then exp(maxValue(minValue(%(signe)s altitude_diff / %(length)s * 0.012, 0.3), -0.3)) else exp(maxValue(minValue(%(signe)s altitude_diff / %(length)s * 0.009, 0.3), -0.3)) end)" # / 7
diffSpeed =        commondiff%{'signe': '+', 'length': length}
reversediffSpeed = commondiff%{'signe': '-', 'length': length}
#print "SELECT (%1s) FROM ways limit 40;"%diffSpeed // 1'000..100'000
#print "SELECT (%1s) FROM ways limit 40;"%reversediffSpeed // 100..400'000

testtooincline = "(case when abs(altitude_diff) / %(length)s < 0.6 then %(calculate)s else -1 end)"
diffSpeed =        testtooincline%{'length': length, 'calculate': diffSpeed}
reversediffSpeed = testtooincline%{'length': length, 'calculate': reversediffSpeed}
#print "SELECT (%1s) FROM ways limit 40;"%diffSpeed // 1'000..100'000
#print "SELECT (%1s) FROM ways limit 40;"%reversediffSpeed // 100..400'000


testlength = "(case when %(length)s > 0 then (%(calculate)s) else -1 end)"
diffSpeed =        testlength%{'length': length, 'calculate': diffSpeed}
reversediffSpeed = testlength%{'length': length, 'calculate': reversediffSpeed}
#print "SELECT (%1s) FROM ways limit 40;"%diffSpeed # 1'000..100'000
#print "SELECT (%1s) FROM ways limit 40;"%reversediffSpeed # 100..400'000

commonspeed = "%(speed)s * %(boothspeed)s"
speed =        commonspeed%{'speed': speed,        'boothspeed': booth_speed}
reversespeed = commonspeed%{'speed': reversespeed, 'boothspeed': booth_speed}
#print "SELECT (%1s) FROM ways limit 40;"%speed # 1.3..20'000

#replaceOverMax = "overMaxValue(%(speed)s, 30.0, -1.0)"
#speed =        replaceOverMax%{'speed': speed,        'calculate': speed}
#reversespeed = replaceOverMax%{'speed': reversespeed, 'calculate': reversespeed}
#print "SELECT (%1s) FROM ways limit 40;"%speed # -1, 1..2

commoncost = "%(length)s / %(diff)s / %(speed)s %(fixed)s"
cost =        commoncost % {'diff': diffSpeed,        'speed': speed,        'length': length, 'fixed': booth_fixed}
reversecost = commoncost % {'diff': reversediffSpeed, 'speed': reversespeed, 'length': length, 'fixed': booth_fixed}
#print "SELECT (%1s) FROM ways limit 40;"%cost # -2'000'000..10'000'000

min = "maxValue(%(cost)s, -1.0)"
cost =        min % {'cost': cost}
reversecost = min % {'cost': reversecost}
#print "SELECT (%1s) FROM ways limit 40;"%cost # -1, 40'000..10'000'000

#overmax = "maxValue(overMaxValue(%(cost)s, 100000000.0, -1.0), -1.0)"
#cost =        overmax % {'cost': cost}
#reversecost = overmax % {'cost': reversecost}
#print "SELECT (%1s) FROM ways limit 40;"%cost # -1, 40'000..10'000'000

print """
DROP TABLE IF EXISTS edges;
CREATE TABLE edges (id int4 PRIMARY KEY, source int4, target int4, cost float8, reverse_cost float8, x1 double precision, y1 double precision, x2 double precision, y2 double precision, name varchar(200), highway varchar(30), length float8, altitude_diff float8);
SELECT AddGeometryColumn('edges','the_geom',4326,'MULTILINESTRING',2);
CREATE OR REPLACE FUNCTION maxValue(val1 double precision, val2 double precision) RETURNS double precision AS
'
begin
if (val1 > val2) then
return val1;
else
return val2;
end if;
end;
'
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION minValue(val1 double precision, val2 double precision) RETURNS double precision AS
'
begin
if (val1 > val2) then
return val2;
else
return val1;
end if;
end;
'
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overMaxValue(val1 double precision, val2 double precision, def double precision) RETURNS numeric AS
'
begin
if (val1 > val2) then
return def;
else
return val1;
end if;
end;
'
LANGUAGE 'plpgsql';
"""
print """
INSERT INTO edges (id, source, target, cost, reverse_cost, x1, y1, x2, y2, the_geom, name, highway, length, altitude_diff)
    SELECT gid AS id, source, target, (%(cost)s)::float8 AS cost, (%(reversecost)s)::float8 AS reverse_cost, 
        x1, y1, x2, y2, the_geom, name, highway, %(length)s, altitude_diff
    FROM ways;"""%{'cost': cost, 'reversecost': reversecost, 'length': length}
print """
DELETE FROM edges WHERE cost = -1 AND reverse_cost = -1;
CREATE INDEX source_idx ON edges(source);
CREATE INDEX target_idx ON edges(target);
CREATE INDEX geom_idx ON ways USING GIST(the_geom GIST_GEOMETRY_OPS);
--SELECT assign_vertex_id('edges', 0.00001, 'the_geom', 'id');
VACUUM FULL ANALYZE;"""
