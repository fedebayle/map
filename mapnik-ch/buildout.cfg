[buildout]
parts = eggs
        activate
        template
        mapnik-stylesheets
        modwsgi
develop = . tilecloud tilecloud-chain
newest = false
prefer-final = true
extensions = buildout.dumppickedversions
versions = versions

# isolate ourself from the System Python
exec-sitecustomize = false

develop-eggs-directory = buildout/develop-eggs
eggs-directory = buildout/eggs
parts-directory = buildout/parts
bin-directory = buildout/bin


[vars]
# project instance id
instanceid = osm
# the Unix user under which the modwsgi daemon processes are executed,
# can be overriden in development-specific buildout config files
modwsgi_user = www-data
# url-path where the instance must respond.
# defaults is '/${vars:instanceid}/wsgi'.
apache-entry-point = /${vars:instanceid}/wsgi
# database user
dbuser = www-data
# database password
dbpassword = www-data
# database host
dbhost = localhost
# database port
dbport = 5432
# database name
db = osm-ch-18052013

[eggs]
recipe = z3c.recipe.scripts
eggs = osm_ch
dependent-scripts = true
interpreter = python

[activate]
recipe = evg.recipe.activate

[modwsgi]
recipe = collective.recipe.modwsgi
eggs = osm_ch
config-file = ${buildout:directory}/production.ini

[template]
recipe = z3c.recipe.filetemplate
source-directory = .
exclude-directories =
    buildout
    mapnik-stylesheets
extends = vars

[mapnik-stylesheets]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =

    if [ ! -e "../world_boundaries/world_boundaries_m.shp" ]
    then
        wget http://tile.openstreetmap.org/world_boundaries-spherical.tgz -O ../world_boundaries-spherical.tgz
        tar xzf ../world_boundaries-spherical.tgz -C ..
        rm ../world_boundaries-spherical.tgz
    fi

    if [ ! -e "../world_boundaries/processed_p.shp" ]
    then
        wget http://tile.openstreetmap.org/processed_p.tar.bz2 -O ../processed_p.tar.bz2
        tar xjf ../processed_p.tar.bz2 -C ../world_boundaries
        rm ../processed_p.tar.bz2
    fi

    if [ ! -e "../world_boundaries/shoreline_300.shp" ]
    then
        wget http://tile.openstreetmap.org/shoreline_300.tar.bz2 -O ../shoreline_300.tar.bz2
        tar xjf ../shoreline_300.tar.bz2 -C ../world_boundaries
        rm ../shoreline_300.tar.bz2
    fi

    if [ ! -e "../world_boundaries/ne_10m_populated_places.shp" ]
    then
        wget http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_populated_places.zip -O ../ne_10m_populated_places.zip
        unzip -q ../ne_10m_populated_places.zip -d ../world_boundaries
        rm ../ne_10m_populated_places.zip
    fi

    if [ ! -e "../world_boundaries/ne_110m_admin_0_boundary_lines_land.shp" ]
    then
        wget http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_boundary_lines_land.zip -O ../ne_110m_admin_0_boundary_lines_land.zip
        unzip -q ../ne_110m_admin_0_boundary_lines_land.zip -d ../world_boundaries
        rm ../ne_110m_admin_0_boundary_lines_land.zip
    fi

    cd mapnik-stylesheets
    ./generate_xml.py --dbname ${vars:db} --host ${vars:dbhost} --user ${vars:dbuser} --port 5432 --password ${vars:dbpassword} --estimate_extent false --extent 870000,30000,900000,350000 --world_boundaries ../../world_boundaries osm.xml generated.xml
    cd ..

[osm2pgsql]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =

    if [ ! -e "/media/sbrunner/Big/OSM/geofabrik-${vars:db}.osm.gz" ]
    then
        wget http://download.geofabrik.de/europe/switzerland-latest.osm.bz2 -O /media/sbrunner/Big/OSM/geofabrik-${vars:db}.osm.gz
    fi

    sudo -u postgres createdb ${vars:dbport} -E UTF8 ${vars:db} -T template0
    sudo -u postgres createlang ${vars:dbport} plpgsql ${vars:db}
    sudo -u postgres psql ${vars:dbport} -d ${vars:db} -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
    sudo -u postgres psql ${vars:dbport} -d ${vars:db} -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql
    sudo -u postgres psql -p ${vars:dbport} -d ${vars:db} -c 'create extension hstore;'

    sudo -u postgres osm2pgsql --create --proj epsg:21781 --slim --cache 1000 --database ${vars:db} --style osm2pgsql.style --hstore /media/sbrunner/Big/OSM/geofabrik-${vars:db}.osm.gz
    sudo -u postgres psql -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO "${vars:dbuser}"' ${vars:db}

[versions]
distribute = 0.6.22
zc.buildout = 1.5.2

jinja2 = 2.6
PyYAML = 3.10
Shapely = 1.2.17
pyramid = 1.4
Chameleon = 2.11
Mako = 0.7.3
MarkupSafe = 0.15
PasteDeploy = 1.5.0
pillow = 1.7.8
WebOb = 1.2.3
boto = 2.8.0
bottle = 0.11.6
collective.recipe.cmd = 0.6
evg.recipe.activate = 0.5
flake8 = 2.0
mccabe = 0.2
pep8 = 1.4.4
psycopg2 = 2.4.6
pyflakes = 0.6.1
pyproj = 1.9.3
repoze.lru = 0.6
requests = 1.1.0
simplejson = 3.1.0
translationstring = 1.1
venusian = 1.0a7
z3c.recipe.scripts = 1.0.1
zc.recipe.egg = 1.3.2
zope.deprecation = 4.0.2
zope.interface = 4.0.5
